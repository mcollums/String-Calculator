{"version":3,"sources":["components/calculator-container.js","App.js","serviceWorker.js","index.js"],"names":["calculatorContainer","state","message","handleClick","id","console","log","clicked","indexOf","setState","concat","this","handleIncrement","currentLosses","losses","handleReset","score","handleShuffle","Container","Row","Col","InputGroup","Prepend","Text","FormControl","as","aria-label","Button","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wVAwDeA,E,2MApDXC,MAAQ,CACJC,QAAS,I,EAGbC,YAAc,SAAAC,GAEV,GADAC,QAAQC,IAAIF,IAC4B,IAApC,EAAKH,MAAMM,QAAQC,QAAQJ,GAC3B,EAAKK,SAAS,CAAEF,QAAS,EAAKN,MAAMM,QAAQG,OAAON,KAAO,WACtDC,QAAQC,IAAI,kBAAoBK,KAAKV,MAAMM,SAC3CI,KAAKC,yBAEN,CACHP,QAAQC,IAAI,wBAA0B,EAAKL,MAAMM,SACjD,IAAIM,EAAgB,EAAKZ,MAAMa,OAC/B,EAAKL,SAAS,CAAEK,OAAQD,EAAgB,IACxCR,QAAQC,IAAI,UAAY,EAAKL,MAAMa,QACnC,EAAKC,gB,EAIbA,YAAc,WACV,EAAKN,SAAS,CACVO,MAAO,EACPd,QAAS,yBACTK,QAAS,KAEb,EAAKU,iB,wEAKL,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKhB,GAAG,YACJ,kBAACiB,EAAA,EAAD,KACI,kBAACA,EAAA,EAAWC,QAAZ,KACI,kBAACD,EAAA,EAAWE,KAAZ,uBAEJ,kBAACC,EAAA,EAAD,CAAaC,GAAG,WAAWC,aAAW,mBAG1C,kBAACC,EAAA,EAAD,mC,GA5CMC,aCenBC,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,eAAd,qBACA,wBAAIA,UAAU,eAAd,mBACA,uBAAGA,UAAU,eAAb,SACA,kBAAC,EAAD,SCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f3ab1969.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Container, Row, Col, Button, InputGroup, FormControl } from 'react-bootstrap';\n\nclass calculatorContainer extends Component {\n    state = {\n        message: \"\"\n    };\n\n    handleClick = id => {\n        console.log(id);\n        if (this.state.clicked.indexOf(id) === -1) {\n            this.setState({ clicked: this.state.clicked.concat(id) }, function () {\n                console.log(\"Added to array \" + this.state.clicked);\n                this.handleIncrement();\n            });\n        } else {\n            console.log(\"Already in the array \" + this.state.clicked);\n            let currentLosses = this.state.losses;\n            this.setState({ losses: currentLosses + 1 })\n            console.log(\"Score: \" + this.state.losses);\n            this.handleReset();\n        }\n    };\n\n    handleReset = () => {\n        this.setState({\n            score: 0,\n            message: \"You Lose. Sad Sad Day.\",\n            clicked: []\n        });\n        this.handleShuffle();\n    };\n\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    <Row>\n                        <Col id=\"titleCol\">\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>With textarea</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl as=\"textarea\" aria-label=\"With textarea\" />\n                            </InputGroup>\n\n                            <Button> This is a button </Button>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default calculatorContainer","import React from 'react';\nimport './App.css';\nimport CalculatorContainer from \"./components/calculator-container.js\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h5 className=\"text-center\">String Calculator</h5>\n        <h5 className=\"text-center\"> How it works: </h5>\n        <p className=\"text-center\"> ... </p>\n        <CalculatorContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}