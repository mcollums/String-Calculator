{"version":3,"sources":["components/Button/Button.js","components/CalcContainer.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","id","onClick","handleClick","message","numOr0","n","val","parseInt","isNaN","delimiterRegex","delimiter","cb","replace","customDelimiters","CalculatorContainer","handleInputChange","event","setState","string","target","value","handleSubmit","error","state","startsWith","handleDelimiter","newString","makeNumArr","convertedArr","split","pop","test","filter","elem","map","el","regex","push","forEach","indexOf","noNString","customRegex","RegExp","join","splitArr","negArr","i","length","Math","sign","startAdd","arr","result","reduce","a","b","formula","errorClass","this","Container","Row","Col","InputGroup","onChange","e","data-test","Prepend","Text","FormControl","as","aria-label","type","Component","App","md","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b23d9630.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nfunction Button(props) {\n  \n    return (\n      <button className=\"btn btn-primary\" id={props.id} onClick={() => props.handleClick()}> {props.message} </button>\n    );\n  }\n\nexport default Button;","import React, { Component } from \"react\";\nimport './CalcContainer.css';\nimport Button from './Button';\nimport { Container, Row, Col, InputGroup, FormControl } from 'react-bootstrap';\n\n//Operator to see if input is a number, if not it's made into a 0\nconst numOr0 = (n) => {\n    let val = parseInt(n);\n    if (isNaN(val)) {\n        return 0\n    } else {\n        return val\n    }\n}\n\n//Adds escape characters where needed in string\nlet delimiterRegex = (delimiter, cb) => {\n    let delRegex = delimiter.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    cb(delRegex);\n}\n\n//Array of custom delimiters\nlet customDelimiters = [',', '\\\\n'];\n\n\nclass CalculatorContainer extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            string: \"\",\n            result: \"\",\n            error: \"\",\n            message: \"\",\n            formula: \"\"\n        };\n    }\n\n\n    //This tracks any changes to the input box and adds it to the state.\n    handleInputChange = (event) => {\n        this.setState({\n            string: event.target.value\n        });\n    };\n\n    handleSubmit = () => {\n        //Clear any errors\n        this.setState({\n            error: \"\",\n            message: \"\"\n        })\n        //If the string starts with the // we know they're going to make a new delimiter\n        if (this.state.string.startsWith(\"//\")) {\n            this.handleDelimiter(this.state.string, (newString) => {\n                //Use the callback to send string without the new delimiter\n                this.makeNumArr(newString);\n            });\n        } else {\n            this.makeNumArr(this.state.string);\n        }\n    }\n\n    //Function takes out the delimiter, adds to array and sends string to startAdd()\n    handleDelimiter = (string, cb) => {\n        let convertedArr = [];\n\n        //Getting the value between // and \\n \n        let delimiter = string.split('//').pop().split('\\\\n')[0];\n\n        //if the delimiter is surrounded by [], remove it then convert to regex and add to converted array\n        //if not, convert to regex and add to converted array\n        if (/^\\[[\\S\\s]*]$/.test(delimiter)) {\n            delimiter.split(/\\[|\\]/g)\n                .filter((elem) => {\n                    return elem != false;\n                })\n                .map((el) => {\n                    delimiterRegex(el, (regex) => {\n                        convertedArr.push(regex);\n                    })\n                });\n\n        } else {\n            delimiterRegex(delimiter, regex => {\n                convertedArr.push(regex);\n            });\n        }\n\n        //See if the element is already in the custom array, if not, add it.\n        convertedArr.forEach((elem) => {\n            if (customDelimiters.indexOf(elem) === -1) {\n                customDelimiters.push(elem);\n            }\n        })\n\n        //Take out everything between // and \\n then send it to the startAdd function\n        let newString = string.split(/\\/\\/(.*?)\\\\n/g).pop();\n        cb(newString);\n    }\n\n    makeNumArr = (string) => {\n        // replacing '\\n' with ',' because it's a pain\n        let noNString = string.replace(/\\\\n/g, ',');\n        //create regex from custom delimiter array\n        let customRegex = new RegExp(customDelimiters.join('|'), 'g');\n        //split array by the custom delimiters\n        let splitArr = noNString.split(customRegex);\n\n        //Array to hold negative Numbers\n        let negArr = [];\n        //Filtering out values if over 1000 or negative\n        for (let i = 0; i <= splitArr.length; i++) {\n            if (splitArr[i] > 1000) {\n                splitArr[i] = 0\n            }\n            if (Math.sign(splitArr[i]) === -1) {\n                negArr.push(splitArr[i]);\n            }\n        }\n\n        //If there are negative numbers, throw user an error. \n        //Otherwise, add the array together\n        if (negArr.length > 0) {\n            this.setState({\n                message: `Please change the following integers to positive values: ${negArr} .`,\n                error: \"true\"\n            });\n            //Error is thrown when there are negative numbers.\n            // Having trouble running this with the unit tests so it's commented out for now.\n            // throw new Error ('Negative Numbers not Accepted');\n        } else {\n            this.startAdd(splitArr);\n        };\n    }\n\n    //This function seperates the string and adds them together as integers.\n    startAdd = (arr) => {\n        this.setState({\n            message: \"\",\n            error: \"\",\n            result: arr.reduce((a, b) =>\n                numOr0(a) + numOr0(b))\n        });\n    };\n\n\n    render() {\n        // determine whether error is hidden based on state\n        const errorClass = this.state.error ? '' : 'hidden';\n\n        return (\n            <div>\n                <Container>\n                    <Row>\n                        <Col id=\"titleCol\">\n                            <InputGroup\n                                onChange={(e) => { this.handleInputChange(e) }}\n                                data-test=\"input-group\"\n                            >\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>Your String Here</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl as=\"textarea\" aria-label=\"With textarea\" />\n                                <Button\n                                    data-test=\"submit-button\"\n                                    id=\"submitBtn\"\n                                    handleClick={this.handleSubmit}\n                                    message={\"Get the Sum!\"}\n                                    type=\"submit\">\n                                </Button>\n                            </InputGroup>\n                            <p className={`error ${errorClass}`} data-test=\"error-display\"> Error: {this.state.message} </p>\n                            <p data-test=\"formula-display\"> </p>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <h1 data-test=\"result-display\"> {this.state.result} </h1>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default CalculatorContainer","import React from 'react';\nimport './App.css';\nimport CalculatorContainer from \"./components/CalcContainer.js\";\nimport { Row, Col } from 'react-bootstrap';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Row id=\"infoRow\" className=\"justify-content-md-center\">\n        <Col md=\"6\" id=\"titleCol\">\n          <h1 className=\"text-left\">String</h1>\n          <h1 className=\"text-left\">Calculator</h1>\n        </Col>\n        <Col md=\"6\" id=\"instructionsCol\">\n          <h5 className=\"text-left\"> How it works: </h5>\n          <p className=\"text-left\"> Our String Calculator accepts any positive string of numbers separated by '\\n' , ' , ' or a custom delimiter. </p>\n          <p className=\"text-left\"> - To create a new delimiter, follow the guidline: //delimiter\\nString e.g. //;\\n2;5 will return 7 </p>\n          <p className=\"text-left\"> - Alternatively, create a new delimiter by surrounding it in square brackets.</p>\n          <p className=\"text-left\">   //[delimiter][delimiter]\\nString e.g. //[*][!!][r9r]\\\\n11r9r22*33!!44 will return 110 </p>\n          <p className=\"text-left\"> - Numbers above 1000 will be ignored. Negative numbers are not supported.</p>\n        </Col>\n      </Row>\n\n      <CalculatorContainer data-test=\"component-calculator-container\"/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}